#!/bin/bash

# Use manifest-tool to create the manifest, given the experimental
# "docker manifest" command isn't available yet on Docker Hub.

curl -Lo manifest-tool https://github.com/estesp/manifest-tool/releases/download/v0.9.0/manifest-tool-linux-amd64
chmod +x manifest-tool

# Generate the manifest file.
# Parameter 1 is the multi-arch image name, e.g. ckulka/baikal:0.5.1
# Parameter 2 is the base-image for the variants, e.g. ckulka/baikal:0.5.1-apache
function generate_manifest {
  DOCKER_REPO=$1
  IMAGE_NAME=$2
  DOCKER_TAG=$3
  RELEASE_TAG=${DOCKER_TAG%%-*}
  
  REPO_NAME=${IMAGE_NAME##*/} ; REPO_NAME=${REPO_NAME%%-*}
  REPO_NAME_AND_USER=${IMAGE_NAME%%/${REPO_NAME}*}
  USER_NAME=${REPO_NAME_AND_USER##*/}
  
  NAME=${USER_NAME}/${REPO_NAME}

  cat > manifest-generated.yaml << EOF
image: ${NAME}:${RELEASE_TAG}
manifests:
  - image: ${NAME}:${RELEASE_TAG}-amd64
    platform:
      architecture: amd64
      os: linux
  - image: ${NAME}:${RELEASE_TAG}-arm32v7
    platform:
      architecture: arm
      os: linux
      variant: v7
EOF

  echo "manifest: "
  cat manifest-generated.yaml
}

# Example: values
# ${DOCKER_REPO} = index.docker.io/guysoft/custompios-test
# ${IMAGE_NAME} = index.docker.io/guysoft/custompios-test:1.2.4-amd64
# ${DOCKER_TAG} = 1.2.4-amd64


# If we're building the "devel" branch, then also push it as "latest"
if [[ "$DOCKER_TAG" == "amd64" ]] || [[ "$DOCKER_TAG" == "arm32v7" ]]
then
  echo "Pushing multi-arch manifest $DOCKER_REPO:latest"
  ./manifest-tool push from-spec multi-arch-manifest.yaml

# Handle release
else
  echo "handeling: ${DOCKER_REPO}|${IMAGE_NAME}|${DOCKER_TAG}"
  generate_manifest "${DOCKER_REPO}" "${IMAGE_NAME}" "${DOCKER_TAG}"
  
  echo "Pushing multi-arch manifest"
  ./manifest-tool push from-spec manifest-generated.yaml
fi
